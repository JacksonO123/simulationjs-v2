import { SimulationElement3d } from './graphics.js';
import type { Vector2, Vector3, LerpFunc } from './types.js';
import { Color } from './utils.js';
import { Settings } from './settings.js';
export declare const worldProjectionMatrix: import("./types.js").Mat4;
export declare const orthogonalMatrix: import("./types.js").Mat4;
export declare class Camera {
    private pos;
    private rotation;
    private aspectRatio;
    private updated;
    private screenSize;
    constructor(pos: Vector3, rotation?: Vector3);
    setScreenSize(size: Vector2): void;
    getScreenSize(): Vector2;
    hasUpdated(): boolean;
    updateConsumed(): void;
    move(amount: Vector3, t?: number, f?: LerpFunc): Promise<void>;
    moveTo(pos: Vector3, t?: number, f?: LerpFunc): Promise<void>;
    rotateTo(value: Vector3, t?: number, f?: LerpFunc): Promise<void>;
    rotate(amount: Vector3, t?: number, f?: LerpFunc): Promise<void>;
    getRotation(): Vector3;
    getPos(): Vector3;
    getAspectRatio(): number;
}
export declare let camera: Camera;
export declare class Simulation extends Settings {
    canvasRef: HTMLCanvasElement | null;
    private bgColor;
    private scene;
    private fittingElement;
    private running;
    private initialized;
    private resizeEvents;
    private frameRateView;
    private transparentElements;
    private vertexBuffer;
    private indexBuffer;
    constructor(idOrCanvasRef: string | HTMLCanvasElement, sceneCamera?: Camera | null, showFrameRate?: boolean);
    private handleCanvasResize;
    on<K extends keyof HTMLElementEventMap>(event: K, cb: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => void, options?: boolean | AddEventListenerOptions): void;
    onResize(cb: (width: number, height: number) => void): void;
    getWidth(): number;
    getHeight(): number;
    add(el: SimulationElement3d, id?: string): void;
    remove(el: SimulationElement3d): void;
    removeId(id: string): void;
    empty(): void;
    private applyCanvasSize;
    setCanvasSize(width: number, height: number): void;
    start(): void;
    stop(): void;
    setBackground(color: Color): void;
    setDefaultColor(color: Color): void;
    getDefaultColor(): Color;
    getScene(): SimulationElement3d[];
    private render;
    private renderScene;
    fitElement(): void;
}
